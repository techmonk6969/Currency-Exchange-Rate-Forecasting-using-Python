# -*- coding: utf-8 -*-
"""Currency Exchange Rate Forecasting using Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ck9FEn4gn8kGRXuTyEPym2-64v64jvcH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

data = pd.read_csv('/content/INR-USD.csv')
data.head()

print(data.isnull().sum())

data = data.dropna()

data.describe()

figure = px.line(data, x='Date', y='Close',title = 'USD - INR Converson Rate over the years')
figure.show()

data['Date'] = pd.to_datetime(data['Date'], format='%d-%m-%Y')
data['Year'] = data['Date'].dt.year
data['Month'] = data['Date'].dt.month
data['Day'] = data['Date'].dt.day
data.head()

import plotly.graph_objects as go
import plotly.io as pio

growth = data.groupby('Year').agg({'Close': lambda x: (x.iloc[-1]-x.iloc[0])/x.iloc[0]*100})

fig = go.Figure()
fig = go.Figure(data=[go.Bar(x=growth.index, y=growth['Close'], name='Growth')])

fig.update_layout(title='Yearly Growth of USD-INR  Conversion Rate',
                  xaxis_title = 'Year',
                  yaxis_title = 'Growth (%)',
                  width=900,
                  height=600)

pio.show(fig)

data['Growth'] = data.groupby(['Year', 'Month'])['Close'].transform(lambda x: (x.iloc[-1] - x.iloc[0]) / x.iloc[0] * 100)

grouped_data = data.groupby('Month').mean().reset_index()

fig = go.Figure()

fig.add_trace(go.Bar(
    x=grouped_data['Month'],
    y=grouped_data['Growth'],
    marker_color=grouped_data['Growth'],
    hovertemplate='Month: %{x}<br>Average Growth: %{y:.2f}%<extra></extra>'
))

fig.update_layout(
    title='Average Growth of USD-INR Conversion Rate by Month',
    xaxis_title='Month',
    yaxis_title='Average Growth (%)',
    width=900,
    height=600
)

pio.show(fig)

from statsmodels.tsa.seasonal import seasonal_decompose
result = seasonal_decompose(data['Close'], model='multiplicative', period=24)
fig=plt.figure()
fig=result.plot()
fig.set_size_inches(8,6)
plt.show()

!pip install pmdarima
from contextlib import suppress
from pmdarima.arima import auto_arima # Import auto_arima after installing the library
model = auto_arima(data['Close'], seasonal=True, m=52, suppress_warnings=True)
print(model.order)

p,d, q, = 2, 1, 0

from statsmodels.tsa.statespace.sarimax import SARIMAX # Import SARIMAX from the new location
model = SARIMAX(data['Close'], order=(p, d, q),
                seasonal_order = (p, d, q, 52))
fitted = model.fit()
fitted.summary()

predictions = fitted.predict(len(data), len(data)+60)
print(predictions)

# Create figure
fig = go.Figure()

# Add training data line plot
fig.add_trace(go.Scatter(
    x=data.index,
    y=data['Close'],
    mode='lines',
    name='Training Data',
    line=dict(color='blue')
))

# Add predictions line plot
fig.add_trace(go.Scatter(
    x=predictions.index,
    y=predictions,
    mode='lines',
    name='Predictions',
    line=dict(color='green')
))

fig.update_layout(
    title="INR Rate - Training Data and Predictions",
    xaxis_title="Date",
    yaxis_title="Close",
    legend_title="Data",
    width=900,
    height=600
)

pio.show(fig)

